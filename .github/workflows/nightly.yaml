name: nightly

on:
  push:
    branches: [ "main","run_tests_using_cluster_config"]
  pull_request:
    branches: [ "main","run_tests_using_cluster_config" ]
  schedule:
    - cron: "30 22 * * *"

permissions:
  contents: read
jobs:
  build_and_run_tests:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install pytest_dotenv
        pip install pytest-reporter-html1

    - name: Install aws cli
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
        aws --version

#    - name: Install eksctl
#      run: |
#        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
#        sudo mv /tmp/eksctl /usr/local/bin
#        eksctl version
#        eksctl get clusters

    - name: Install direnv
      run: |
        sudo apt install direnv
        direnv --version

    - name: Install npm
      run: |
        sudo apt install npm
        npm --version 

    - name: Install gsts
      run: |
        npm install --global gsts
        
    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: Install flux
      run: |
        curl -s https://fluxcd.io/install.sh | sudo bash
        flux version --client

    - name: Install aws-iam-authenticator
      run: |
        curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
        chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH
        echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
        aws-iam-authenticator version

    - name: Install playwright
      run: |
        pip install pytest-playwright

    - name: Install chromium
      run: |
        playwright install chromium

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Authenticate with WeaveEksEditor role
      run: |
        export GOOGLE_USERNAME=tagreed.anany@weave.works
        source ./env.sh

    - name: run tests
      run: |
        pytest -s -v --video=retain-on-failure --screenshot=only-on-failure --template=html1/index.html --report=test-results/report.html -o junit_family=xunit2 --junitxml=test-results/junit_tests_report.xml

    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: success() || failure()
      with:
          name: test-report
          path: test-results/junit_tests_report.xml

    - name: Download test artifacts
      uses: actions/download-artifact@v3.0.1
      if: success() || failure()
      with:
        name: test-report
        path: test-results

    - name: Display structure of downloaded files
      if: always()
      run: ls -R
      working-directory: test-results

    - name: Publish test report
      id: test_summary
      uses: mikepenz/action-junit-report@v3.7.6
      if: success() || failure()
      with:
        report_paths: test-results/junit_tests_report.xml

    - name: Notify Slack
      id: slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: C058RPVS5DZ
        payload: |
          {
          	"blocks": [
          		{
          			"type": "section",
          			"text": {
          				"type": "mrkdwn",
          				"text": "*Tests result:*"
          			}
          		},
          		{
          			"type": "section",
          			"text": {
          				"type": "mrkdwn",
          				"text": "Tests :test_tube:\t\t\tPassed :check:\t\t\tSkipped :arrow_right_hook:\t\t\tFailed :x:\n>executed:*${{steps.test_summary.outputs.total}}*\t\t\tpassed:*${{steps.test_summary.outputs.passed}}*\t\t\tskipped:*${{steps.test_summary.outputs.skipped}}*\t\t\tfailed:*${{steps.test_summary.outputs.failed}}*"
          			}
          		},          
          		{
          			"type": "section",
          			"text": {
          				"type": "mrkdwn",
          				"text": "*View result on Github:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          			}
          		}
          	]
          }
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK